import math


N, e = 194749497518847283, 50736902528669041

# decoded form of base64 ciphertext on github

Ciphertext = [47406263192693509,51065178201172223,30260565235128704,82385963334404268, 
8169156663927929,47406263192693509,178275977336696442,134434295894803806,
112111571835512307,119391151761050882,30260565235128704,82385963334404268,
134434295894803806,47406263192693509,45815320972560202,174632229312041248,
30260565235128704,47406263192693509,119391151761050882,57208077766585306,
134434295894803806,47406263192693509,119391151761050882,47406263192693509,
112111571835512307,52882851026072507,119391151761050882,57208077766585306,
119391151761050882,112111571835512307,8169156663927929,134434295894803806,
57208077766585306,47406263192693509,185582105275050932,174632229312041248,
134434295894803806,82385963334404268,172565386393443624,106356501893546401,
8169156663927929,47406263192693509,10361059720610816,134434295894803806,
119391151761050882,172565386393443624,47406263192693509,8169156663927929,
52882851026072507,119391151761050882,8169156663927929,47406263192693509,
45815320972560202,174632229312041248,30260565235128704,47406263192693509,
52882851026072507,119391151761050882,111523408212481879,134434295894803806,
47406263192693509,112111571835512307,52882851026072507,119391151761050882,
57208077766585306,119391151761050882,112111571835512307,8169156663927929,
134434295894803806,57208077766585306]


def confract(x): # continued fraction
    a = [math.floor(x)]
    x = x - a[0]
    while x > 0:
        a.append(math.floor(1 / x))
        x = 1 / x - a[-1]
        if len(a) == 10000:   # 1000 repetitions
            return a
    return a

def convergents(lista): # convergants  Ni/Di of our continuted fraction
    conv = [1, lista[1]] # the first 2 denominators
    for i in range(2,len(lista)):
        conv.append(lista[i]*conv[-1] + conv[-2]) # Denominator of convergent fraction
    return conv

def wiener(N,e):
    lista = convergents(confract(e / N))
    for i in lista:
        if pow(2, e*i ,N) == 2:
            return i
    return False


d = wiener(N,e)


def decrypt(ciphertext,N,d): # RSA decryption
    plaintext = []
    for i in ciphertext:
        plaintext.append(chr(pow(i,d,N))) # convert ASCII characters to text after decryption
    return "".join(plaintext)

print(f"Secret key found (N,d) = {N,d}")
print(f"Plaintext:{decrypt(Ciphertext,N,d)}")


